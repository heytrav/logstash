input {
  lumberjack {
    port => 5043
    type => "lumberjack"
    ssl_certificate => "/etc/ssl/logstash/logstash.crt"
    ssl_key => "/etc/ssl/logstash/logstash.key"
  }
}

filter {
  syslog_pri {}

  if [type] == "syslog" {
        grok {
            patterns_dir => "/etc/logstash/patterns"
            match => {
                "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} supervisord:\s%{GREEDYDATA:[@metadata][supervisor_log]}"
            }
        }
        if [@metadata][supervisor_log] {

          grok {
            patterns_dir => "/etc/logstash/patterns"
            match => {
              "[@metadata][supervisor_log]" => "couch\s%{GREEDYDATA:[@metadata][couch_message]}"
            }
            add_tag => ["couchdb"]
          }
          grok {
            patterns_dir => "/etc/logstash/patterns"
            match => {
              "[@metadata][supervisor_log]" => "kyototycoon\s%{GREEDYDATA:[@metadata][kyoto_message]}"
            }
            add_tag => ["kyototycoon"]
          }
          if ("couchdb" in [tags]) {
            grok {
                patterns_dir => "/etc/logstash/patterns"
                match => {
                    "[@metadata][couch_message]" => "\[%{LOGLEVEL:loglevel}\]\s\[<%{DATA:elapsed}>\]\s%{IPORHOST:request_host}\s-\s-\s%{WORD:request_method}\s%{PATH:request_path}\s%{NONNEGINT:status}"
                }
              remove_tag => ["_grokparsefailure"]
            }
          } else if ("kyototycoon" in [tags]) {
            grok {
                patterns_dir => "/etc/logstash/patterns"
                match => {
                    "[@metadata][kyoto_message]" => "%{TIMESTAMP_ISO8601}:\s\[%{DATA:kyoto_type}\]:\s%{GREEDYDATA:kyoto_log}"
                }
              remove_tag => ["_grokparsefailure"]
            }
          } else {
            grok {
                patterns_dir => "/etc/logstash/patterns"
                match => {
                    "[@metadata][supervisor_log]" => "%{DATA:supervisor_program} \[%{DATA:deployment}\] %{DATA:syslog_program}:line %{NONNEGINT:linenumber}(?:\[%{POSINT:syslog_pid}\])?(?:\s\[%{LOGLEVEL:loglevel}\])?: (?<module>[^\s]+) - %{GREEDYDATA:program_output}"
                }
            }
            if [program_output] {
              grok {
                patterns_dir => "/etc/logstash/patterns"
                match => {
                    "program_output" => '%{IPORHOST:request_host}\s-\s-\s\[%{FLASKDATE:flaskdate}\]\s\"%{WORD:request_method}\s+%{PATH:request_path}\sHTTP\/%{NUMBER:http_version}\"\s%{NONNEGINT:status}%{GREEDYDATA}'
                }
                add_field => [ "received_at", "%{@timestamp}" ]
                add_field => [ "received_from", "%{host}" ]
                remove_tag => ["_grokparsefailure"]
                add_tag => ["httpRequest"]
              }
              if !("httpRequest" in [tags]) {
                grok {
                    patterns_dir => "/etc/logstash/patterns"
                    match => {
                        "program_output" => "STARTREQUEST:%{DATA:service_queried};CORRELATION_ID:%{UUID:[@metadata][correlation_id]}"
                    }
                    add_tag => ["requestStarted", "elapsedTest"]
                    remove_tag => ["_grokparsefailure"]
                }

                grok {
                    patterns_dir => "/etc/logstash/patterns"
                    match => {
                        "program_output" => "STARTSERVICE:%{DATA:service};CORRELATION_ID:%{UUID:[@metadata][correlation_id]}"
                    }
                    add_tag => ["serviceStarted", "elapsedTest"]
                    remove_tag => ["_grokparsefailure"]
                }

                if !("requestStarted" in [tags] or "serviceStarted" in [tags]) {
                    grok {
                      patterns_dir => "/etc/logstash/patterns"
                      match => {
                          "program_output" => "STOPREQUEST:%{DATA:service_queried};CORRELATION_ID:%{UUID:[@metadata][correlation_id]}"
                      }
                      add_tag => ["requestFinished", "elapsedTest"]
                      remove_field => ["queue"]
                      remove_tag => ["_grokparsefailure"]
                    }
                    grok {
                      patterns_dir => "/etc/logstash/patterns"
                      match => {
                          "program_output" => "STOPSERVICE:%{DATA};CORRELATION_ID:%{UUID:[@metadata][correlation_id]}"
                      }
                      add_tag => ["serviceFinished", "elapsedTest"]
                      remove_field => ["queue"]
                      remove_tag => ["_grokparsefailure"]
                    }
                }
              }
            }
          }
        }
        if [loglevel] {
            if [loglevel] =~ /(CRITICAL|FATAL|critical|fatal)/ {
                mutate {add_tag => "hipchat_alarm"}
                mutate {add_field => {"alert_type" => "error"}}
                mutate {add_field => {"priority" => "normal"}}
            } else if [loglevel] =~ /(ERROR|error)/ {
                mutate {add_tag => "hipchat_error"}
                mutate {add_field => {"alert_type" => "error"}}
                mutate {add_field => {"priority" => "normal"}}
            } else if [loglevel] =~ /(WARN|warn)/ {
                mutate {add_tag => "hipchat_warn"}
                mutate {add_field => {"alert_type" => "warning"}}
                mutate {add_field => {"priority" => "low"}}
            } else if [loglevel] =~ /(INFO|info)/ {
                mutate {add_field => {"alert_type" => "info"}}
                mutate {add_field => {"priority" => "low"}}
            }
        }
        if "serviceFinished" in [tags] or "requestFinished" in [tags] {
            mutate {add_field => {"metric_device" => "%{module}"}}
            mutate {add_field => {"metric_type" => "gauge"}}
            mutate {add_field => {"metric_name" => "%{module}.elapsedtime"}}
            if [elapsed.time] {
                mutate {add_field => {"metric_value" => "%{[elapsed][time]}"}}
            }
        }
        if "hipchat_warn" in [tags] {
            throttle {
                before_count => 3
                after_count => 8
                period => 300
                key => "hipchat_warn"
                add_tag => "hipchat_warn_throttled"
            }
        }

    date {
        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
    }
    elapsed {
        start_tag => "requestStarted"
        end_tag => "requestFinished"
        unique_id_field => "[@metadata][correlation_id]"
        timeout => 60
    }
    elapsed {
        start_tag => "serviceStarted"
        end_tag => "serviceFinished"
        unique_id_field => "[@metadata][correlation_id]"
        timeout => 60
    }
  }
}

output {
  elasticsearch {
    host => "localhost"
    port => "9300"
    cluster => 'elasticsearch-k8s'
    protocol => 'transport'
  }
  if [elapsed.time] {
    datadog_metrics {
        api_key => "DATADOG_API_KEY"
        device => "%{module}"
        metric_value => "%{elapsed.time}"
        metric_name => "Elapsed Time"
        metric_type => "gauge"
    }
  }
  if "hipchat_alarm" in [tags] {
    if [deployment] and [deployment] in ["production", "staging"] {
        hipchat {
            room_id => "errors"
            color => "red"
            token => "HIPCHAT_TOKEN"
            trigger_notify => true
            format => "[%{loglevel}] %{module} - %{program_output}"
        }
    } else {
        hipchat {
            room_id => "test"
            color => "red"
            token => "HIPCHAT_TOKEN"
            trigger_notify => true
            format => "[%{loglevel}] %{module} - %{program_output}"
        }
    }
  } else if "hipchat_error" in [tags] {
    if [deployment] and [deployment] in ["production", "staging"] {
        hipchat {
            room_id => "errors"
            color => "yellow"
            token => "HIPCHAT_TOKEN"
            trigger_notify => false
            format => "[%{loglevel}] %{module} - %{program_output}"
        }
    } else {
        hipchat {
            room_id => "test"
            color => "yellow"
            token => "HIPCHAT_TOKEN"
            trigger_notify => false
            format => "[%{loglevel}] %{module} - %{program_output}"
        }
    }
  } else if "hipchat_warn" in [tags] and "hipchat_warn_throttled" not in [tags] {
    if [deployment] and [deployment] in ["production", "staging"] {
        hipchat {
            room_id => "errors"
            color => "gray"
            token => "HIPCHAT_TOKEN"
            trigger_notify => false
            format => "[%{loglevel}] %{module} - %{program_output}"
        }
    } else {
        hipchat {
            room_id => "test"
            color => "gray"
            token => "HIPCHAT_TOKEN"
            trigger_notify => false
            format => "[%{loglevel}] %{module} - %{program_output}"
        }
    }
  }
  datadog {
    api_key => "DATADOG_API_KEY"
    text => "%{program_output}"
  }
  datadog_metrics {
    api_key => "DATADOG_API_KEY"
  }
  stdout { codec => json }
}
